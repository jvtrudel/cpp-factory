
#include "{{nom}}.h"

{{#includes}}
#include {{{.}}}
{{/includes}}

{{#namespaces}}
namespace {{{.}}} {
{{/namespaces}}

{{#constructors}}
{{#default}}
{{nom}}::{{nom}}():
{{#struct}}
{{tag}}({{type}}()){{^last}},{{/last}}
{{/struct}}
{}
{{/default}}
{{/constructors}}


{{#operators}}
{{#lt}}
bool operator<(const {{nom}}& lhs, const {{nom}}& rhs){

  if(
  {{#struct}}
    lhs.{{tag}}<rhs.{{tag}} {{^last}}&&{{/last}}
    {{/struct}}
  ) {
    return true;
  }else{
    return false;
  }
}
{{/lt}}
{{#gt}}
bool operator>(const {{nom}}& lhs, const {{nom}}& rhs){
  if(
  {{#struct}}
    lhs.{{tag}}>rhs.{{tag}} {{^last}}&&{{/last}}
    {{/struct}}
  ) {
    return true;
  }else{
    return false;
  }
}
{{/gt}}
{{#le}}
inline bool operator<=(const {{nom}}& lhs, const {{nom}}& rhs){
  if(
  {{#struct}}
    lhs.{{tag}}<=rhs.{{tag}} {{^last}}&&{{/last}}
    {{/struct}}
  ) {
    return true;
  }else{
    return false;
  }
}
{{/le}}
{{#ge}}
bool operator>=(const {{nom}}& lhs, const {{nom}}& rhs){
  if(
  {{#struct}}
    lhs.{{tag}}>=rhs.{{tag}} {{^last}}&&{{/last}}
    {{/struct}}
  ) {
    return true;
  }else{
    return false;
  }
}
{{/ge}}
{{#eq}}
bool operator==(const {{nom}}& lhs, const {{nom}}& rhs){
  if(
  {{#struct}}
    lhs.{{tag}}==rhs.{{tag}} {{^last}}&&{{/last}}
    {{/struct}}
  ) {
    return true;
  }else{
    return false;
  }
}
{{/eq}}
{{#ne}}
bool operator!=(const {{nom}}& lhs, const {{nom}}& rhs){
  if(
  {{#struct}}
    lhs.{{tag}}!=rhs.{{tag}} {{^last}}&&{{/last}}
    {{/struct}}
  ) {
    return true;
  }else{
    return false;
  }
}
{{/ne}}
{{/operators}}


{{#namespaces}}
  }
{{/namespaces}}
